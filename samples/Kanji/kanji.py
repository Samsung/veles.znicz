#!/usr/bin/python3 -O
# encoding: utf-8
"""
Created on June 29, 2013


Model created for Chinese characters recognition. Dataset was generated by
VELES with generate_kanji.py utility.
Model – fully-connected Neural Network with MSE loss function.

Copyright (c) 2013 Samsung Electronics Co., Ltd.
"""


import logging

from veles.config import root
from veles.znicz.standard_workflow import StandardWorkflow


class KanjiWorkflow(StandardWorkflow):
    """
    Model created for Chinese characters recognition. Dataset was generated by
    VELES with generate_kanji.py utility.
    Model – fully-connected Neural Network with MSE loss function.
    """
    def create_workflow(self):
        self.link_repeater(self.start_point)
        self.link_loader(self.repeater)
        self.link_forwards(self.loader, ("input", "minibatch_data"))
        self.link_evaluator(self.forwards[-1])
        self.link_decision(self.evaluator)
        self.link_snapshotter(self.decision)
        self.link_gds(self.snapshotter)

        if root.kanji.add_plotters:
            self.link_error_plotter(self.gds[0])
            self.link_weights_plotter(
                self.error_plotter[-1], layers=root.kanji.layers,
                limit=root.kanji.weights_plotter.limit,
                weights_input="weights")
            self.link_min_max_plotter(self.weights_plotter[-1], is_min=False)
            self.link_min_max_plotter(self.max_plotter[-1], is_min=True)
            self.link_mse_plotter(self.min_plotter[-1])
            last = self.mse_plotter[-1]
        else:
            last = self.gds[0]

        self.link_end_point(last)

    def initialize(self, device, weights, bias, **kwargs):
        super(KanjiWorkflow, self).initialize(device=device)
        if weights is not None:
            for i, fwds in enumerate(self.forwards):
                fwds.weights.map_invalidate()
                fwds.weights.mem[:] = weights[i][:]
        if bias is not None:
            for i, fwds in enumerate(self.forwards):
                fwds.bias.map_invalidate()
                fwds.bias.mem[:] = bias[i][:]


def run(load, main):
    weights = None
    bias = None
    w, snapshot = load(
        KanjiWorkflow,
        decision_config=root.kanji.decision,
        loader_config=root.kanji.loader,
        loader_name=root.kanji.loader_name,
        snapshotter_config=root.kanji.snapshotter,
        layers=root.kanji.layers,
        loss_function=root.kanji.loss_function)
    if snapshot:
        if type(w) == tuple:
            logging.info("Will load weights")
            weights = w[0]
            bias = w[1]
        else:
            logging.info("Will load workflow")
            logging.info("Weights and bias ranges per layer are:")
            for fwds in w.fwds:
                logging.info("%f %f %f %f" % (
                    fwds.weights.mem.min(), fwds.weights.mem.max(),
                    fwds.bias.mem.min(), fwds.bias.mem.max()))
            w.decision.improved <<= True
    main(weights=weights, bias=bias)
